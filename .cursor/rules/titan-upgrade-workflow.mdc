---
description: 
globs: 
alwaysApply: false
---
# Titan Upgrade Workflow

This workflow enables systematic analysis of evolved projects built from Titan to extract improvements back to the main boilerplate.

## **Workflow Trigger**
When a user says "analyze [project-name] for Titan upgrades" or similar, initiate this workflow.

## **Prerequisites**
- Evolved project must be cloned into Titan workspace (e.g., `./evolved-projects/my-saas-app/`)
- TaskMaster MCP must be available
- User should specify the project directory path

## **Master Analysis Process**

### **Step 1: Create Project-Specific PRD**
- Copy `docs/titan-upgrade-prd-template.txt` to `.taskmaster/docs/prd.txt`
- Replace placeholders with evolved project details:
  - `[PROJECT_NAME]` → actual project name
  - `[TIME_SPAN]` → development duration  
  - `[SCALE_DESCRIPTION]` → project size/scope
  - `[LIST_KEY_AREAS]` → known major improvements
- Save the customized PRD

### **Step 2: Initialize TaskMaster Analysis**
- Initialize TaskMaster: `task-master init` (if not already done)
- Parse the PRD: `task-master parse-prd --input=.taskmaster/docs/prd.txt --research`
- This generates the master analysis task and domain-specific subtasks automatically
### **Step 3: Systematic Domain Analysis**
For each domain in [analysis-domains.mdc](mdc:.cursor/rules/analysis-domains.mdc):
- Compare evolved project implementation vs current Titan
- Identify specific improvements and patterns
- Document findings with file paths and code examples
- Use TaskMaster to log detailed analysis in subtask details

### **Step 4: Migration Planning**
- Review all findings against [migration-patterns.mdc](mdc:.cursor/rules/migration-patterns.mdc)
- Create migration tasks for each viable improvement
- Prioritize based on impact and implementation complexity
- Consider backward compatibility and breaking changes

### **Step 5: Implementation**
- Execute migration tasks systematically
- Test each change in isolation
- Update documentation and examples
- Validate that Titan CLI still works correctly

## **Key Principles**
- **Systematic**: Analyze every major domain, don't skip areas
- **Evidence-Based**: Always provide file paths and code examples
- **Safety-First**: Follow migration patterns to avoid breaking changes
- **Documentation**: Log everything in TaskMaster for review
- **Iterative**: Can be run multiple times as projects evolve

## **Commands to Use**
```bash
# Step 1: Initialize TaskMaster (if needed)
task-master init

# Step 2: Create and customize PRD
cp docs/titan-upgrade-prd-template.txt .taskmaster/docs/prd.txt
# Edit .taskmaster/docs/prd.txt to replace placeholders

# Step 3: Parse PRD to generate tasks
task-master parse-prd --input=.taskmaster/docs/prd.txt --research

# Step 4: Expand analysis tasks for detailed breakdown
task-master expand --id=[analysis-task-id] --research --force

# Step 5: Track progress and work through tasks
task-master next
task-master list --status=pending
task-master show [task-id] # View specific task details
```

## **Expected Outcome**
A comprehensive set of improvements extracted from the evolved project and safely migrated to Titan, making the boilerplate better for future projects.
